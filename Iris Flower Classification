import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

data=pd.read_csv("C:/Users/Vaishnavi/OneDrive/Desktop/Iris.csv")
data
data.info()
data.describe()
data.isnull().sum()

# Visualize the distribution of target classes
sns.countplot(x='Species', data=data)
plt.title('Distribution of Iris Species')
plt.show()

# Drop the 'Id' column as it is not useful for modeling
data.drop('Id', axis=1, inplace=True)

X = data.drop('Species', axis=1)
y = data['Species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

sns.boxplot(data=pd.DataFrame(X_train_scaled, columns=X_train.columns))
plt.title('Scaled Features')
plt.show()

train_model = RandomForestClassifier(n_estimators=100, random_state=42)
train_model.fit(X_train_scaled, y_train)

train_predictions = train_model.predict(X_train_scaled)
test_predictions = train_model.predict(X_test_scaled)

print("Training Accuracy:", accuracy_score(y_train, train_predictions))
print("Testing Accuracy:", accuracy_score(y_test, test_predictions))

print("Classification Report for Testing Data:")
print(classification_report(y_test, test_predictions))

sns.heatmap(confusion_matrix(y_test, test_predictions), annot=True, cmap='Blues', fmt='d')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

new_data_model = [[5.1, 3.5, 1.4, 0.2], [6.3, 2.9, 5.6, 1.8]]
new_data_scaled_model = scaler.transform(new_data_model)
predictions = train_model.predict(new_data_scaled_model)
print("Predictions:", predictions)
