import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression

data = pd.read_csv("C:/Users/Vaishnavi/OneDrive/Desktop/car data.csv")
data
data.info()
sns.pairplot(data)
plt.show()
# Handle missing values
data.dropna(inplace=True)
data = pd.get_dummies(data, drop_first=True)

# Split features and target variable
X = data.drop('Selling_Price', axis=1)
y = data['Selling_Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Visualize scaled features
plt.figure(figsize=(10, 6))
sns.boxplot(data=pd.DataFrame(X_train_scaled, columns=X_train.columns))
plt.xticks(rotation=90)
plt.show()

# Initialize and train the model
data_model = LinearRegression()
data_model.fit(X_train_scaled, y_train)

# Predictions on training and testing set
train_predictions = data_model.predict(X_train_scaled)
test_predictions = data_model.predict(X_test_scaled)

print('Train MSE:', mean_squared_error(y_train, train_predictions))
print('Test MSE:', mean_squared_error(y_test, test_predictions))
print('Train R^2:', r2_score(y_train, train_predictions))
print('Test R^2:', r2_score(y_test, test_predictions))
